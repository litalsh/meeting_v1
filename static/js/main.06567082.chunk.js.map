{"version":3,"sources":["Task.js","App.js","reportWebVitals.js","index.js"],"names":["task","props","className","class","onDoubleClick","move","checked","title","onClick","remove","id","App","useState","stack","setStack","heap","setHeap","taskRemoveHandler","type","taskIndex","findIndex","tempList","splice","console","log","keyboardRemoveHandler","e","ctrlKey","shiftKey","which","tempStack","length","useEffect","document","addEventListener","removeEventListener","changeListHandler","topic","isDone","tempHeap","undefined","map","Task","placeholder","onKeyDown","event","target","value","uuidv4","autoFocus","aria-flowto","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.06567082.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./App.css\";\r\n\r\nconst task = (props) => {\r\n\r\n  return(\r\n  <li className={props.class}  key={props.id} onDoubleClick={props.move}>\r\n    <label className={props.checked}>{props.title}</label>\r\n    <button className=\"remove\" onClick={props.remove}>X</button>\r\n  </li>\r\n)};\r\n\r\nexport default task;\r\n","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport Task from \"./Task\";\n\nconst App = () => {\n  const [stack, setStack] = useState([]);\n  const [heap, setHeap] = useState([]);\n\n  const newTaskHandler = (event) => {\n    if (event.which === 13 && event.target.value !== '') {\n      setStack([\n        ...stack,\n        { id: uuidv4(), type: 'stack', topic: event.target.value, isDone: false }\n      ]);\n      event.target.value = '';\n    };\n  };\n\n  const newHeapHandler = (event) => {\n    if (event.which === 13 && event.target.value !== '') {\n      setHeap([\n        ...heap,\n        { id: uuidv4(), type: 'heap', topic: event.target.value, isDone: false }\n      ]);\n      event.target.value = '';\n    };\n  };\n\n  const taskRemoveHandler = (id, type) => {\n    if(type === 'stack'){\n    const taskIndex = stack.findIndex(task => {\n      return task.id === id;\n    });\n\n    let tempList = [...stack];\n    tempList.splice(tempList[taskIndex], 1);\n    setStack(tempList)\n  };\n    if(type === 'heap'){\n      const taskIndex = heap.findIndex(task => {\n        return task.id === id;\n      });\n  \n      let tempList = [...heap];\n      tempList.splice(tempList[taskIndex], 1);\n      setHeap(tempList)\n    };\n    return console.log('taskRmoveHandler: ', stack);\n\n  }\n\n  const keyboardRemoveHandler = (e) => {\n    \n    if (e.ctrlKey && e.shiftKey && e.which === 88) {\n      let tempStack = [...stack];\n      tempStack.splice(tempStack.length - 1, 1);\n      setStack(tempStack);\n    }\n  }\n  useEffect(() => {\n    if (document){\n      document.addEventListener('keydown', keyboardRemoveHandler);\n    }\n    return () => {\n      document.removeEventListener('keydown', keyboardRemoveHandler);\n    }\n  }, [stack]);\n\n  // const keyboardCangeListHandler = (e, id, type) => {\n    \n  //   if (e.ctrlKey && e.which === 77) {\n  //     changeListHandler(id, type);\n  //   }\n  // }\n\n  const changeListHandler = (id, type) => {\n    // move task from stack to heap\n    if (type === 'stack') {\n      const taskIndex = stack.findIndex(task => {\n        return task.id === id;\n      });\n      setHeap([...heap, { id: stack[taskIndex].id, type: 'heap', topic: stack[taskIndex].topic, isDone: false }]);\n\n      let tempStack = [...stack];\n      tempStack.splice(taskIndex, 1);\n      setStack(tempStack);\n      console.log('change to heap ', stack, '  ', heap)\n    };\n\n    // move task from heap to stack\n    if (type === 'heap') {\n      const taskIndex = heap.findIndex(task => {\n        return task.id === id;\n      });\n      setStack([...stack, { id: heap[taskIndex].id, type: 'stack', topic: heap[taskIndex].topic, isDone: false }]);\n\n      let tempHeap = [...heap];\n      tempHeap.splice(taskIndex, 1);\n      setHeap(tempHeap);\n      console.log('change to stack ', stack, '  ', heap)\n    };\n  }\n\n  return (\n    <div className=\"container\">\n      <h4>Ctrl+Shift+x: Removes current stack  |  Double click: Moves the task between lists</h4>\n      <div className=\"current-task\">\n        <h1>{stack[0] !== undefined ? stack[stack.length - 1].topic : null}</h1>\n      </div>\n      <fieldset className=\"task-list stack-list\">\n      <legend>Stack</legend>\n        <ul>\n          <>\n            {console.log('1', stack)}\n            {stack[0] !== undefined ? stack.map((task, id) => (\n              <Task title={task.topic}\n                key={id}\n                remove={() => taskRemoveHandler(task.id, task.type)}\n                move={() => changeListHandler(task.id, task.type)}\n                class={\"stack_item\"}\n                 />\n            )) : null}\n          </>\n        </ul>\n        <input type=\"text\" placeholder=\"Add a task to stack\" onKeyDown={newTaskHandler} className='stack-input'  autoFocus aria-flowto='heap-input' />\n      </fieldset>\n\n      <fieldset className=\"task-list\">\n        <legend>Heap</legend>\n        <input type=\"text\" placeholder=\"Add a task to heap\" onKeyDown={newHeapHandler} className='heap-input'  aria-flowto='stack-input' />\n        <ul>\n          <>\n            {console.log('2', heap)}\n            {heap[0] !== undefined ? heap.map((task, id) => (\n              <Task title={task.topic}\n                key={id}\n                remove={() => taskRemoveHandler(task.id, task.type)}\n                move={() => changeListHandler(task.id, task.type)}\n                class={\"heap_item\"}/>\n            )) : null}\n          </>\n        </ul>\n      </fieldset>\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}